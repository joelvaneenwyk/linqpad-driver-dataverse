<#@ template language="C#" debug="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Xrm.Sdk" #>
<#@ import namespace="Microsoft.Xrm.Sdk.Metadata" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.PowerPlatform.Cds.Client;

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]

namespace <#=this.Namespace#>.Entities
{
	<#foreach (var entity in Metadata)
	{#>
		[System.Runtime.Serialization.DataContractAttribute()]
		[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("<#=entity.entityMetadata.LogicalName#>")]
		public partial class <#=entity.entityMetadata.SchemaName#> : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		{
	
			public <#=entity.entityMetadata.SchemaName#>() : 
					base(EntityLogicalName)
			{
			}
	
			public const string EntityLogicalName = "<#=entity.entityMetadata.LogicalName#>";
			
			public const string EntitySchemaName = "<#=entity.entityMetadata.SchemaName#>";
		
			public const string PrimaryIdAttribute = "<#=entity.entityMetadata.PrimaryIdAttribute#>";
		
			public const string PrimaryNameAttribute = "<#=(entity.entityMetadata.PrimaryNameAttribute ?? "")#>";
			
			public const string EntityLogicalCollectionName = "<#=(entity.entityMetadata.LogicalCollectionName ?? "")#>";
	
			public const int EntityTypeCode = <#=entity.entityMetadata.ObjectTypeCode#>;
	
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
	
			public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
	
			private void OnPropertyChanged(string propertyName)
			{
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
	
			private void OnPropertyChanging(string propertyName)
			{
				if ((this.PropertyChanging != null))
				{
					this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
				}
			}
			<#foreach (var attribute in entity.entityMetadata.Attributes.Where(x=>(!x.IsLogical.GetValueOrDefault() || x.IsRetrievable.GetValueOrDefault()) && x.AttributeType != AttributeTypeCode.Virtual && x.AttributeType != AttributeTypeCode.CalendarRules))
			{
				var attributeType = GetTypeFromCode(attribute.AttributeType);
				var attributeName = attribute.SchemaName == entity.entityMetadata.SchemaName ? $"{attribute.SchemaName}1" : attribute.SchemaName;
			#>
				<#if(attribute.LogicalName == entity.entityMetadata.PrimaryIdAttribute) 
				{#>
					[AttributeLogicalNameAttribute("<#=attribute.LogicalName#>")]
					public System.Nullable<System.Guid> <#=attributeName#>
					{
						get
						{
							return this.GetAttributeValue<System.Nullable<System.Guid>>("<#=attribute.LogicalName#>");
						}
						set
						{
							this.OnPropertyChanging("<#=attributeName#>");
							this.SetAttributeValue("<#=attribute.LogicalName#>", value);
							if (value.HasValue)
							{
								base.Id = value.Value;
							}
							else
							{
								base.Id = System.Guid.Empty;
							}
							this.OnPropertyChanged("<#=attributeName#>");
						}
					}
					[AttributeLogicalNameAttribute("<#=attribute.LogicalName#>")]
					public override System.Guid Id
					{
						get
						{
							return base.Id;
						}
						set
						{
							this.<#=attributeName#> = value;
						}
					}
				<#} else if(attributeType == "OptionSetValue") 
				{
				   var enumName = $"{entity.entityMetadata.SchemaName}_{attribute.SchemaName}";
				#>
					[AttributeLogicalNameAttribute("<#=attribute.LogicalName#>")]
					public virtual <#=enumName#>? <#=attributeName#>
					{
						[System.Diagnostics.DebuggerNonUserCode()]
						get
						{
							return (<#=enumName#>?)this.GetAttributeValue<OptionSetValue>("<#=attribute.LogicalName#>")?.Value;
						}
						[System.Diagnostics.DebuggerNonUserCode()]
						set
						{
							this.OnPropertyChanging("<#=attributeName#>");
							this.SetAttributeValue("<#=attribute.LogicalName#>", value.HasValue ? new OptionSetValue((int)value) : null);
							this.OnPropertyChanged("<#=attributeName#>");
						}
					}
				<#} else { #>
				[AttributeLogicalNameAttribute("<#=attribute.LogicalName#>")]		
				public <#=attributeType#> <#=attributeName#>
				{
					get
					{
						return this.GetAttributeValue<<#=attributeType#>>("<#=attribute.LogicalName#>");
					}
					set
					{
						this.OnPropertyChanging("<#=attributeName#>");
						this.SetAttributeValue("<#=attribute.LogicalName#>", value);
						this.OnPropertyChanged("<#=attributeName#>");
					}
				}
				<#}#>
			<#}#>
		}
	<#}#>
}

namespace <#= this.Namespace #>
{
	using Entities; 
	<#foreach (var entity in Metadata)
	{#>
		<#foreach (var optionMetadata in entity.optionMetadata)
		{#>
			[System.Runtime.Serialization.DataContractAttribute()]
			public enum <#=entity.entityMetadata.SchemaName#>_<#=optionMetadata.attributeName#>
			{
				<#foreach (var option in optionMetadata.options)
				{
				#>
					[System.Runtime.Serialization.EnumMemberAttribute()]
					<#=option.Label#> = <#=option.Value#>,
				<#}#>
			}			
		<#}#>
	<#}#>

	public partial class <#= this.TypeName #> : OrganizationServiceContext
	{
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public <#= this.TypeName #>(IOrganizationService client) : 
				base(client)
		{
			this.DataverseClient = (CdsServiceClient)client;
		}
		<# foreach (var entity in Metadata)
		{
		#>
		public IQueryable<<#=entity.entityMetadata.SchemaName#>> <#=entity.entityMetadata.SchemaName#>
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.CreateQuery<<#=entity.entityMetadata.SchemaName#>>();
			}
		}
		<#}#>

		public CdsServiceClient DataverseClient
        {
            get;
            private set;
        }
	}
}

<#+
public string Namespace { get; set; }

public string TypeName { get; set; }
#>

<#+
string GetTypeFromCode(AttributeTypeCode? attributeTypeCode)
{
	var attributeType = "object";
	switch (attributeTypeCode)
	{
		case AttributeTypeCode.BigInt:
		case AttributeTypeCode.Integer:	
			attributeType = "int";
			break;
		case AttributeTypeCode.Boolean:
		case AttributeTypeCode.ManagedProperty:
			attributeType = "bool";
			break;
		case AttributeTypeCode.Customer:
		case AttributeTypeCode.Lookup:	
		case AttributeTypeCode.Owner:		
			attributeType = "EntityReference";
			break;
		case AttributeTypeCode.DateTime:
			attributeType = "DateTime";
			break;
		case AttributeTypeCode.Decimal:
			attributeType = "decimal";
			break;
		case AttributeTypeCode.Double:
			attributeType = "double";
			break;
		case AttributeTypeCode.EntityName:
		case AttributeTypeCode.Memo:
		case AttributeTypeCode.String:	
			attributeType = "string";
			break;
		case AttributeTypeCode.Money:
			attributeType = "Money";
			break;
		case AttributeTypeCode.Picklist:
		case AttributeTypeCode.State:
		case AttributeTypeCode.Status:
			attributeType = "OptionSetValue";
			break;
		case AttributeTypeCode.Uniqueidentifier:
			attributeType = "Guid";
			break;
	}
	return attributeType;
}
#>